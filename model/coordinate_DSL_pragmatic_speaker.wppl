// target towers (hand-encoded into speaker's DSL)
var trialSequence = json.read('./input/ca_synthesis_output_manual_min_and_dechunked.json');

var lexemes = ['blah', 'blab', 'bloop', 'bleep', 'blarp'];
var numIterations = argv.numIterations;
var alpha = argv.alpha;
var beta = argv.beta;
var epsilon = 0.01
console.log('running with {alpha: ', alpha, 'beta: ', beta, '}');

var makeObject = function(key, value) {
  return _.zipObject([key], [value]);
};

// extend starting lexicon to include (uncertain) mapping for new DSL primitives
var LexiconPrior = function(dsl) {
  return Infer({method: 'enumerate'}, function() {
    var baseLexicon = {
      'h' : 'place a horizontal block.',
      'v' : 'place a vertical block.',
    };
    return reduce(function(item, rest) {
      var newItem = (
        item[0] == 'r' ?
          makeObject(item, 'move to the right by ' + item.split('_')[1]) :
          item[0] == 'l' ? 
          makeObject(item, 'move to the left by ' + item.split('_')[1]) :
          makeObject(item, sample(Categorical({vs: lexemes})))
      );
      return extend(rest, newItem);
    }, baseLexicon, dsl.slice(2));
  });
}

var UtterancePrior = function(program, dsl) {
  return Infer({method: 'enumerate'}, function() {
    var lexicon = sample(LexiconPrior(dsl));
    return map(function(instruct) {
      return parseDSL(instruct, lexicon);
    }, program.split(' '));
  });
};

// recursively parse expressions written in DSL into language
var parseDSL = function(e, lexicon) {
  return lexicon[e];
};

// parse expressions written in language back to own DSL
var parseLanguage = function(language, lexicon) {
  return Infer({method: 'enumerate'}, function() {
    var leftover = _.difference(_.values(_.invert(lexicon)), _.keys(lexicon));
    var meaning = _.has(_.invert(lexicon), language) ? _.invert(lexicon)[language] : uniformDraw(leftover);
    return flip(epsilon) ? uniformDraw(_.keys(lexicon)) : meaning;
  });
};

// compute lexicon posterior, taking into account some previous observations
// speakers do this by assuming data came from knowledgable listener, and vice versa
var lexiconPosterior = function(originAgent, dsl, prevTrials) {
  return Infer({method: 'enumerate'}, function() {
    var lexicon = sample(LexiconPrior(dsl));

    // enforce mutual exclusivity (i.e. no two chunks map to same word)
    condition(_.uniq(_.values(lexicon)).length == dsl.length);
    
    // loop through data from previous rounds, condition on data from partner
    mapData({data: prevTrials}, function(trial){
      var instructions = _.zip(trial.utt, trial.responses, trial.targetInstruction);

      // loop through sub-trial "events" 
      mapData({data: instructions }, function(instruction){
        var utt = instruction[0];
        var response = instruction[1];
        var targetInstruction = instruction[2];
        if(originAgent === 'B') {
          factor(_.isEqual(parseDSL(targetInstruction, lexicon), utt) ? 0 : -3);
        } else if(originAgent === 'A') {
          factor(parseLanguage(utt, lexicon).score(response));
        }
      });
    });
    return lexicon;
  });
};

// conventional builder (L0, marginalizing over lexicons)
var Builder = cache(function(utt, state, prevData) {
  return Infer({method:"enumerate"}, function(){
    var lexicon = sample(lexiconPosterior('B', state.dsl, prevData));
    return sample(parseLanguage(utt, lexicon));
  });
});

// what would a builder with this lexical do if they heard these words?
var literalBuilder = cache(function(utt, lexicon) {
  Infer({method: 'enumerate'}, function() {
      return sample(parseLanguage(utt, lexicon));
  });
});

// conventional Architect (S1, reasoning about expected L1 behavior across lexicons)
var Architect = cache(function(currTrial, prevData) {
  // construct current program prior
  var possiblePrograms = _.keys(currTrial.programs_with_length);
  var programPrior = Categorical({vs: possiblePrograms});
  var posterior = lexiconPosterior('A', currTrial.dsl, prevData);
  
  return Infer({method:"enumerate"}, function(){
    // decide which program to produce
    var instructSeq = sample(programPrior);
    var uttSeq = sample(UtterancePrior(instructSeq, currTrial.dsl));

    console.log('architect considering instruction seq', instructSeq);
    console.log('architect considering utt', uttSeq);

    // marginalize over lexicon beliefs
    var utility = expectation(posterior, function(lexicon) {
      return sum(map2(function(utt, instruct) {
        return parseLanguage(utt, lexicon).score(instruct);
      }, uttSeq, instructSeq.split(' ')));
    });

    console.log('utility', utility);
    
    factor(alpha * ((1 - beta) * utility - beta * instructSeq.length));
    return {utt: uttSeq, intendedSeq: instructSeq};
  });
});

var step = function(i, remainingTrials, prevData, filename) {
  if(remainingTrials.length == 0) 
    return prevData;
  var trialNum = prevData.length;
  console.log('on trial', trialNum);
  var currTrial = first(remainingTrials);
  var speakerDist = Architect(currTrial, prevData);
  var speakerAction = sample(speakerDist);
  var intendedSeq = speakerAction.intendedSeq;
  var listenerActionSeq = map(function(uttPart) {    
    var listenerDist = Builder(uttPart, currTrial, prevData);
    return sample(listenerDist);
  }, speakerAction.utt);

  // TODO: give partial credit (correct is currently 'all-or-none')
  var newData = {
    targetInstruction: intendedSeq,
    utt : speakerAction.utt,
    responses : listenerActionSeq,
    correct: _.isEqual(listenerActionSeq, intendedSeq.split(' ')),
    numInstructions: intendedSeq.split(' ').length
  };
  csv.writeLine([argv.chainNum, i, argv.alpha, argv.beta, trialNum,
                 newData.correct, newData.numInstructions, newData.targetInstruction,
                 newData.utt.join("~~~"), newData.responses.join(' ')], filename);
  return step(i, rest(remainingTrials), prevData.concat(newData), filename);
};

var fine_grained_csv = csv.open('output/trajectory_bytrial_chain' + argv.chainNum + '.csv');
csv.writeLine(['chainNum', 'iteration', 'alpha', 'beta', 'trialNum', 'accuracy',
               'descriptionLength', 'intendedSequence', 'speakerUtterance',
               'listenerResponse'],
              fine_grained_csv);
map(function(i) {
  step(i, trialSequence, [], fine_grained_csv);
}, _.range(argv.numIterations));
'';
// var f = csv.open('output/trajectory_aggregated_chain' + argv.chainNum + '.csv');
// csv.writeLine(['chainNum', 'alpha', 'beta', 'trialNum', 'accuracy', 'descriptionLength'], f);
// map(function(trialNum) {
//   var acc = expectation(runs, function(run) {
//     return run[trialNum].correct;
//   }).toFixed(2);
//   var len = expectation(runs, function(run) {
//     return run[trialNum].numInstructions;
//   }).toFixed(2);
  
//   csv.writeLine([argv.chainNum, argv.alpha, argv.beta, trialNum, acc, len], f);
// }, _.range(trialSequence.length));
// csv.close(f);
//console.log('last trial', expectation(runs, function(run) {return run[-1]}))
//, null,'\t');
