# tick labels
axis.text = element_text(size = 24),
# title
title = element_text(size = 24),
legend.position = 'FALSE',
text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))
primary_color = '#21606c'
secondary_color = '#22AAAA'
df= read_csv('ORLR-Justin-Julia-rating.csv')
glimpse(df)
df = df[complete.cases(df), ]
glimpse(df)
df$repNum = df$repNum +1
glimpse(df)
df = df %>% group_by(rater,repNum,trialNum,dyad,refType) %>% summarise(refExp = sum(refExp, na.rm = TRUE))
#df$block_diff = df$block_justin - df$block_julia
#mean(df$block_diff)
#hist(df$block_diff)
#df = df %>%  filter(repNum == 3 | repNum == 0)
lin = lm(data = df, refExp ~ repNum*rater*refType)
summary(lin)
interaction = df %>%
group_by(repNum, refType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
glimpse(interaction)
ggplot(interaction, aes(x=repNum, y=mu, colour=refType)) + geom_line(size = 1.5)+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width = 0, size = 1.5)+
geom_point(size = 4) +
theme_few() +
xlab("repetition")+
ylab("referring expressions")+
xlim(c(0.5,4.5)) +
theme(legend.position = 'FALSE', text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))+
scale_color_manual(values=c("#151515","#7D7D7D"))
ggsave('../results/plots/CA_ORLR20_referring_exps.pdf', width=7, height = 11, units='cm', useDingbats = F)
df_trial_total = interaction %>% group_by(repNum)
data(assemblage)
chiperm(data=assemblage, B=199) #, resid=TRUE, cramer=TRUE)
theme_set(theme_classic())
theme_update(# axis labels
axis.title = element_text(size = 28),
# tick labels
axis.text = element_text(size = 24),
# title
title = element_text(size = 24),
legend.position = 'FALSE',
text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))
primary_color = '#21606c'
secondary_color = '#22AAAA'
df= read_csv('ORLR-Justin-Julia-rating.csv')
glimpse(df)
df = df[complete.cases(df), ]
glimpse(df)
df$repNum = df$repNum +1
glimpse(df)
df = df %>% group_by(rater,repNum,trialNum,dyad,refType) %>% summarise(refExp = sum(refExp, na.rm = TRUE))
#df$block_diff = df$block_justin - df$block_julia
#mean(df$block_diff)
#hist(df$block_diff)
#df = df %>%  filter(repNum == 3 | repNum == 0)
lin = lm(data = df, refExp ~ repNum*rater*refType)
summary(lin)
interaction = df %>%
group_by(repNum, refType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
glimpse(interaction)
ggplot(interaction, aes(x=repNum, y=mu, colour=refType)) + geom_line(size = 1.5)+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width = 0, size = 1.5)+
geom_point(size = 4) +
theme_few() +
xlab("repetition")+
ylab("referring expressions")+
xlim(c(0.5,4.5)) +
theme(legend.position = 'FALSE', text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))+
scale_color_manual(values=c("#151515","#7D7D7D"))
ggsave('../results/plots/CA_ORLR20_referring_exps.pdf', width=7, height = 11, units='cm', useDingbats = F)
df_trial_total = interaction %>% group_by(repNum)
data(assemblage)
chiperm(data=assemblage, B=199, resid=TRUE, cramer=TRUE)
chiperm(data=assemblage, B=199, resid=TRUE, cramer=TRUE)
chiperm(data=assemblage, B=199, resid=TRUE, cramer=TRUE)
chiperm(data=assemblage, B=199)#, resid=TRUE, cramer=TRUE)
chiperm(data=interaction, B=199)#, resid=TRUE, cramer=TRUE)
data(interaction)
chiperm(data=interaction, B=199)#, resid=TRUE, cramer=TRUE)
data(assemblage)
assemblage
read_csv("../results/csv/JJ_content.csv")
read_csv("../results/csv/JJ_content.csv")
library(tidyverse)
library(here)
library(lme4)
library(tidyboot)
library(ggthemes)
# library(tm)
# library(GmAMisc)
library(tidytext)
#chiperm function
chiperm <- function(data, B=999, thresh=1.96){
rowTotals <- rowSums(data)
colTotals <- colSums(data)
# compute observed statistic
obs.chi.value <- chisq.test(data)$statistic
# run B different permuted
chistat.perm <- vector(mode = "numeric", length = B)
chi.statistic <- function(x)  chisq.test(x)$statistic
chistat.perm <- sapply(r2dtable(B, rowTotals, colTotals), chi.statistic)
p.lowertail <- (1 + sum (chistat.perm < obs.chi.value)) / (1 + B)
p.uppertail <- (1 + sum (chistat.perm > obs.chi.value)) / (1 + B)
two.sided.p <- 2 * min(p.lowertail, p.uppertail)
return(two.sided.p)
}
### Purr function to calculate chiperm
df = read_csv("../results/csv/JJ_content.csv") %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" ")) %>%
# filter out these weird games (B, R, NAs)
filter(!(gameid %in% c('9387-db1af5ad-b089-48ad-a730-baee40f08177',
'4909-705b801e-4ec3-4910-b180-bb7612d80f25')))
#TRY functino on all gameids with purr
ps <- purrr::map_dbl(unique(df$gameid), ~ {
dtm <- df %>%
filter(gameid == .x) %>%
pull(content) %>%
VectorSource() %>%
VCorpus() %>%
tm_map(removePunctuation) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords()) %>%
DocumentTermMatrix(control = list(stopwords = TRUE)) %>%
tidy() %>%
complete(document, term, fill = list(count = 0)) %>%
spread(term, count) %>%
column_to_rownames(var = 'document') %>%
chiperm(result, B = 10000) %>%
log()
})
install.packages(tm)
install.packages('tm')
library(tidyverse)
library(here)
library(lme4)
library(tidyboot)
library(ggthemes)
library(tm)
# library(GmAMisc)
library(tidytext)
#chiperm function
chiperm <- function(data, B=999, thresh=1.96){
rowTotals <- rowSums(data)
colTotals <- colSums(data)
# compute observed statistic
obs.chi.value <- chisq.test(data)$statistic
# run B different permuted
chistat.perm <- vector(mode = "numeric", length = B)
chi.statistic <- function(x)  chisq.test(x)$statistic
chistat.perm <- sapply(r2dtable(B, rowTotals, colTotals), chi.statistic)
p.lowertail <- (1 + sum (chistat.perm < obs.chi.value)) / (1 + B)
p.uppertail <- (1 + sum (chistat.perm > obs.chi.value)) / (1 + B)
two.sided.p <- 2 * min(p.lowertail, p.uppertail)
return(two.sided.p)
}
### Purr function to calculate chiperm
df = read_csv("../results/csv/JJ_content.csv") %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" ")) %>%
# filter out these weird games (B, R, NAs)
filter(!(gameid %in% c('9387-db1af5ad-b089-48ad-a730-baee40f08177',
'4909-705b801e-4ec3-4910-b180-bb7612d80f25')))
#TRY functino on all gameids with purr
ps <- purrr::map_dbl(unique(df$gameid), ~ {
dtm <- df %>%
filter(gameid == .x) %>%
pull(content) %>%
VectorSource() %>%
VCorpus() %>%
tm_map(removePunctuation) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords()) %>%
DocumentTermMatrix(control = list(stopwords = TRUE)) %>%
tidy() %>%
complete(document, term, fill = list(count = 0)) %>%
spread(term, count) %>%
column_to_rownames(var = 'document') %>%
chiperm(result, B = 10000) %>%
log()
})
paste('combined p-val is ', sum(ps))
theme_set(theme_classic())
theme_update(# axis labels
axis.title = element_text(size = 28),
# tick labels
axis.text = element_text(size = 24),
# title
title = element_text(size = 24),
legend.position = 'FALSE',
text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))
primary_color = '#21606c'
secondary_color = '#22AAAA'
df= read_csv('ORLR-Justin-Julia-rating.csv')
glimpse(df)
df = df[complete.cases(df), ]
glimpse(df)
df$repNum = df$repNum +1
glimpse(df)
df = df %>% group_by(rater,repNum,trialNum,dyad,refType) %>% summarise(refExp = sum(refExp, na.rm = TRUE))
#df$block_diff = df$block_justin - df$block_julia
#mean(df$block_diff)
#hist(df$block_diff)
#df = df %>%  filter(repNum == 3 | repNum == 0)
lin = lm(data = df, refExp ~ repNum*rater*refType)
summary(lin)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(tidyboot)
theme_set(theme_classic())
theme_update(# axis labels
axis.title = element_text(size = 28),
# tick labels
axis.text = element_text(size = 24),
# title
title = element_text(size = 24),
legend.position = 'FALSE',
text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))
primary_color = '#21606C'
secondary_color = '#22AAAA'
df_trial = read.csv('../../results/csv/')
df_trial = read.csv('../../results/csv/reference_context_v4_prolific.csv')
df_trial <- read.csv('../../results/csv/reference_context_v4_prolific.csv')
df_targets <- df_trial %>%
filter(stimType == 'target')
set.seed(bootstrap_seed)
acc.boot <- df_targets %>%
group_by(contextCondition) %>%
tidyboot_mean(column=percent_reference_correct, nboot=100)
acc.boot
set.seed(bootstrap_seed)
acc.boot <- df_targets %>%
group_by(c(contextCondition,subdomain)) %>%
tidyboot_mean(column=percent_reference_correct, nboot=100)
set.seed(bootstrap_seed)
acc.boot <- df_targets %>%
group_by(contextCondition,subdomain) %>%
tidyboot_mean(column=percent_reference_correct, nboot=100)
acc.boot
df_trial <- read.csv('../../results/csv/reference_context_v4_prolific_extended.csv')
df_targets <- df_trial %>%
filter(stimType == 'target')
# Random Seed (for bootstrap analyses)
bootstrap_seed = 0
set.seed(bootstrap_seed)
acc.boot <- df_targets %>%
group_by(contextCondition,subdomain) %>%
tidyboot_mean(column=percent_reference_correct, nboot=100)
acc.boot
set.seed(bootstrap_seed)
n_words.boot <- df_targets %>%
group_by(contextCondition,subdomain) %>%
tidyboot_mean(column=n_words_filtered, nboot=100)
n_words.boot
set.seed(bootstrap_seed)
acc.boot <- df_targets %>%
group_by(subdomain, contextCondition) %>%
tidyboot_mean(column=percent_reference_correct, nboot=100)
acc.boot
set.seed(bootstrap_seed)
n_words.boot <- df_targets %>%
group_by(subdomain, contextCondition) %>%
tidyboot_mean(column=n_words_filtered, nboot=100)
n_words.boot
df_trial <- read.csv('../../results/csv/reference_context_v4_prolific_extended.csv')
df_target <- df_trial %>%
filter(stimType == 'target')
m1.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameid))
m1.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
summary(m1.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
summary(m1.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m1.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain+contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m1.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m2.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m3.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
summary(m1.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m2.n_words)
summary(m3.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m3.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m3.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m1.n_words)
m1.unique_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m1.unique_words)
m1.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m1.unique_words)
m1.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m3.unique_words)
m1.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_unique_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m3.unique_words)
m1.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_unique_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m1.unique_words)
m1.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + (1 | gameID))
m2.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + contextCondition + (1 | gameID))
m3.acc = lmer(data = df_target, percent_reference_correct ~ subdomain*contextCondition + (1 | gameID))
anova(m1.acc,
m2.acc,
m3.acc)
summary(m3.acc)
m1.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + (1 | gameID))
m2.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + contextCondition + (1 | gameID))
m3.acc = lmer(data = df_target, percent_reference_correct ~ subdomain*contextCondition + (1 | gameID))
anova(m1.acc,
m2.acc,
m3.acc)
summary(m1.acc)
m1.acc = lmer(data = df_target, percent_reference_correct ~ contextCondition + (1 | gameID))
m2.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + contextCondition + (1 | gameID))
m3.acc = lmer(data = df_target, percent_reference_correct ~ subdomain*contextCondition + (1 | gameID))
anova(m1.acc,
m2.acc,
m3.acc)
summary(m1.acc)
m1.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + (1 | gameID))
m2.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + contextCondition + (1 | gameID))
m3.acc = lmer(data = df_target, percent_reference_correct ~ subdomain*contextCondition + (1 | gameID))
anova(m1.acc,
m2.acc,
m3.acc)
summary(m1.acc)
m1.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + (1 | gameID))
m2.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + contextCondition + (1 | gameID))
m3.acc = lmer(data = df_target, percent_reference_correct ~ subdomain*contextCondition + (1 | gameID))
anova(m1.acc,
m2.acc,
m3.acc)
summary(m3.acc)
m1.num = lmer(data = df_target, prop_num_words ~ subdomain + (1 | gameID))
m2.num = lmer(data = df_target, prop_num_words ~ subdomain + contextCondition + (1 | gameID))
m3.num = lmer(data = df_target, prop_num_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.num,
m2.num,
m3.num)
summary(m3.num)
m1.adj = lmer(data = df_target, prop_adj_words ~ subdomain + (1 | gameID))
m2.adj = lmer(data = df_target, prop_adj_words ~ subdomain + contextCondition + (1 | gameID))
m3.adj = lmer(data = df_target, prop_adj_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.adj,
m2.adj,
m3.adj)
summary(m3.adj)
m1.adj = lmer(data = df_target, prop_adj_words ~ subdomain + (1 | gameID))
m2.adj = lmer(data = df_target, prop_adj_words ~ subdomain + contextCondition + (1 | gameID))
m3.adj = lmer(data = df_target, prop_adj_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.adj,
m2.adj,
m3.adj)
summary(m3.adj)
m1.noun = lmer(data = df_target, prop_noun_words ~ subdomain + (1 | gameID))
m2.noun = lmer(data = df_target, prop_noun_words ~ subdomain + contextCondition + (1 | gameID))
m3.noun = lmer(data = df_target, prop_noun_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.noun,
m2.noun,
m3.noun)
summary(m3.noun)
m1.noun = lmer(data = df_target, prop_noun_words ~ subdomain + (1 | gameID))
m2.noun = lmer(data = df_target, prop_noun_words ~ subdomain + contextCondition + (1 | gameID))
m3.noun = lmer(data = df_target, prop_noun_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.noun,
m2.noun,
m3.noun)
summary(m1.noun)
m1.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + (1 | gameID))
m2.acc = lmer(data = df_target, percent_reference_correct ~ subdomain + contextCondition + (1 | gameID))
m3.acc = lmer(data = df_target, percent_reference_correct ~ subdomain*contextCondition + (1 | gameID))
anova(m1.acc,
m2.acc,
m3.acc)
summary(m3.acc)
summary(m3.n_words)
m1.n_words = lmer(data = df_target, n_words_filtered ~ contextCondition + (1 | gameID))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m3.n_words)
m1.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_unique_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m1.unique_words)
m1.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + (1 | gameID))
m2.unique_words = lmer(data = df_target, n_unique_words ~ subdomain + contextCondition + (1 | gameID))
m3.unique_words = lmer(data = df_target, n_unique_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.unique_words,
m2.unique_words,
m3.unique_words)
summary(m3.unique_words)
m1.num = lmer(data = df_target, prop_num_words ~ subdomain + (1 | gameID))
m2.num = lmer(data = df_target, prop_num_words ~ subdomain + contextCondition + (1 | gameID))
m3.num = lmer(data = df_target, prop_num_words ~ subdomain*contextCondition + (1 | gameID))
anova(m1.num,
m2.num,
m3.num)
summary(m1.num)
df_target$stimId
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID) + (1 | stimID))
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID) + (1 | stimId))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID) + (1 | stimId))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID) + (1 | stimId)
anova(m1.n_words,
m1.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + (1 | gameID) + (1 | stimId))
m2.n_words = lmer(data = df_target, n_words_filtered ~ subdomain + contextCondition + (1 | gameID) + (1 | stimId))
m3.n_words = lmer(data = df_target, n_words_filtered ~ subdomain*contextCondition + (1 | gameID) + (1 | stimId))
anova(m1.n_words,
m2.n_words,
m3.n_words)
summary(m3.n_words)
