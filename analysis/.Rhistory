scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
library(ggplot2)
p = ggplot(data = data.frame(x = 0), mapping = aes(x = x))
def_rate_fico = function(x){(1-1/(1+exp(-.16*(x-50))))}
p + stat_function(fun = def_rate_fico, size = 1) +
xlim(0,100) +
theme_minimal()+
theme(text = element_text(size=20))+
ggtitle("Likelihood of Defaulting")
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 75, sd = 10), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 60, sd = 10), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 45, sd = 10), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 30, sd = 10), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
n_critical_75 <- qnorm(0.70, mean = 75, sd = 10)
n_critical_60 <- qnorm(0.70, mean = 60, sd = 10)
n_critical_45 <- qnorm(0.70, mean = 45, sd = 10)
n_critical_30 <- qnorm(0.70, mean = 30, sd = 10)
ggplot(NULL, aes(x = c(0, 100))) +
# T-distribution with 5 degrees of freedom
#   Non-significant area
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 75, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_75, 100),
alpha = .3,
fill = "deepskyblue4",
args = list(
mean = 75, sd = 10
)) +
# t-distribution with 25 degrees of freedom
#   Non-significant area
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 60, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_60, 100),
alpha = .3,
fill = "firebrick2",
args = list(
mean = 60, sd = 10
)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 45, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_45, 100),
alpha = .3,
fill = "lightseagreen",
args = list(
mean = 45, sd = 10
)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 30, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_30, 100),
alpha = .3,
fill = "coral",
args = list(
mean = 30, sd = 10
)) +
geom_vline(xintercept = n_critical_75, linetype="dotted")+
geom_vline(xintercept = n_critical_60, linetype="dotted")+
geom_vline(xintercept = n_critical_45, linetype="dotted")+
geom_vline(xintercept = n_critical_30, linetype="dotted")+
theme_minimal()+
theme(text = element_text(size=20))+
xlab("Fitness")+
ylab("Probability Density")+
xlim(0, 100)
pgn <- system.file("extdata/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
#pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
#pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
kasparov_vs_topalov
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
length(pgn)
dtype(pgn)
library(pigeon)
library(rchess)
library(tidyverse)
dtype(pgn)
type(pgn)
typeof(pgn)
cat(pgn)
pgnstr = toString(pgn)
typeof(pgnstr)
pgnstr = toString(pgn)
typeof(pgnstr)
pgn[0]
cat(pgn)
chsspgn <- Chess$new()
chsspgn$load_pgn(pgn)
chsspgn$history()
plot(chsspgn)
chss = Chess$new()
chss$load_pgn(pgn)
chss$history()
plot(chss)
chss$moves()
chss$history()
cat(pgn)
df_hist = chss$moves(verbose = TRUE)
plot(chss)
df_hist
chss$history()
chss$header()
chss$header(2)
chss$header()
chss
chss$history_detail()
chss
#legal moves
chss$moves()
plot(chss)
chss$move("Nbd7")
plot(chss)
#list of legal moves
chss$moves()
chss$move("h4")
plot(chss)
chss$undo()
plot(chss)
#get fen
chss$fen()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
install.packages("rlang", dependencies = TRUE)
library(pigeon)
library(rchess)
library(tidyverse)
pgn = system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn = readLines(pgn, warn = FALSE)
pgn = paste(pgn, collapse = "\n")
cat(pgn)
chss = Chess$new()
chss$load_pgn(pgn)
plot(chss)
#list of legal moves
chss$moves()
chss$moves(verbose = TRUE)
chss$history()
chss$history_detail()
#get fen
chss$fen()
chss$history()
hist = chss$history()
hist = chss$history()
test = Chess$new()
chss$move(hist[1])
test$move(hist[1])
plot(test)
test$moves()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
install.packages("stockfisher")
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
stockfish = startStockfish()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("oganm/stockfisher")
stockfish = startStockfish()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
#install.packages("remotes")
#remotes::install_github("oganm/stockfisher")
library(stockfisher)
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
#install.packages("remotes")
#remotes::install_github("oganm/stockfisher")
library(oganm/stockfisher)
engine = subprocess::spawn_process('/Users/choldawa/Documents/Projects/Chess')
install.packages('subprocess')
install.packages('stockfisher')
install.packages('stockfisher',repos='http://cran.us.r-project.org')
install.packages('subprocess',repos='http://cran.us.r-project.org')
```{r setup, include=FALSE, warning=FALSE}
knitr::opts_chunk$set(fig.width=12, fig.height=8,
warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(lme4)
library(arm)
lin = lm(data = c, trialScore ~ trialNum + WordCount + repNum)
lin = lm(data = c, trialScore ~ trialNum + WordCount + repNum)
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(lme4)
library(arm)
```
#### Start by reading in the data (CSV compiled in compabs_analysis.ipynb)
```{r}
df_block = read.csv('df_block.csv')
df_chat = read.csv('df_chat.csv')
df_trial = read.csv('df_trial.csv')
df_exit = read.csv('df_exit.csv')
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialScore), score, trialScore)) #fix score variable name change from livetest0 to pilots
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
df_trial$repNum = as.numeric(as.character(df_trial$repNum))
```
#### Find GameIDs that satisfy exclusion criteria
```{r}
#Preprocessing ensures all dyads in these CSVs have completed all trials
#How many dyads fulfill 75% Accuracy on 75% of trials
games75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75  & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
```
#### Plot first order analyses (word-block-message-score/repNum)
##### Word count/char count per repNum and trialNum
```{r}
df_chat$wordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
df_chat$charCount =  nchar(tolower(df_chat$content))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,charCount) %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount)) %>%
ggplot(aes(x = repNum, y = charCountAvg)) + geom_line()
```
##### Blocks placed, Score, etc.
```{r}
#Blocks placed per rep
#Average score per rep
```
### Join dfs to get score correlations
##### Score and Word Count
```{r}
#join chat and score to get correlation of words and score
a = df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
b = df_trial %>% select(gameid,trialNum, repNum,trialScore) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(trialScore = max(trialScore)) #to deal with multiple practices
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
#d = merge(c,gamesToKeep, by = "gameid", all.y = TRUE)
c  %>%
ggplot(aes(x = trialNum, y = trialScore, color = repNum))+
geom_point()+
geom_smooth()
```
df_block = read.csv('df_block.csv')
df_chat = read.csv('df_chat.csv')
df_trial = read.csv('df_trial.csv')
df_exit = read.csv('df_exit.csv')
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialScore), score, trialScore)) #fix score variable name change from livetest0 to pilots
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
df_trial$repNum = as.numeric(as.character(df_trial$repNum))
#Preprocessing ensures all dyads in these CSVs have completed all trials
#How many dyads fulfill 75% Accuracy on 75% of trials
games75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75  & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
df_chat$wordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
df_chat$charCount =  nchar(tolower(df_chat$content))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
#Blocks placed per rep
#Average score per rep
#join chat and score to get correlation of words and score
a = df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
lin = lm(data = c, trialScore ~ trialNum + WordCount + repNum)
#join chat and score to get correlation of words and score
a = df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
df_block = read.csv('df_block.csv')
df_chat = read.csv('df_chat.csv')
df_trial = read.csv('df_trial.csv')
df_exit = read.csv('df_exit.csv')
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialScore), score, trialScore)) #fix score variable name change from livetest0 to pilots
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
df_trial$repNum = as.numeric(as.character(df_trial$repNum))
setwd("~/Documents/Projects/composition-abstractions/analysis")
df_block = read.csv('df_block.csv')
df_chat = read.csv('df_chat.csv')
df_trial = read.csv('df_trial.csv')
df_exit = read.csv('df_exit.csv')
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialScore), score, trialScore)) #fix score variable name change from livetest0 to pilots
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
df_trial$repNum = as.numeric(as.character(df_trial$repNum))
#Preprocessing ensures all dyads in these CSVs have completed all trials
#How many dyads fulfill 75% Accuracy on 75% of trials
games75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75  & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
df_chat$wordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
df_chat$charCount =  nchar(tolower(df_chat$content))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
View(df_chat)
df_chat %>%
select(gameid,repNum,wordCount)
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,charCount) %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount)) %>%
ggplot(aes(x = repNum, y = charCountAvg)) + geom_line()
df_chat %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount)) %>%
ggplot(aes(x = repNum, y = charCountAvg)) + geom_line()
df_chat %>%
dplyr::select(gameid,repNum,charCount) %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount)) %>%
ggplot(aes(x = repNum, y = charCountAvg)) + geom_line()
df_chat %>%
dplyr::select(gameid,repNum, wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
#join chat and score to get correlation of words and score
a = df_chat %>%
dplyr::select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
b = df_trial %>% dplyr::select(gameid,trialNum, repNum,trialScore) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(trialScore = max(trialScore)) #to deal with multiple practices
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
#d = merge(c,gamesToKeep, by = "gameid", all.y = TRUE)
c  %>%
ggplot(aes(x = trialNum, y = trialScore, color = repNum))+
geom_point()+
geom_smooth()
lin = lm(data = c, trialScore ~ trialNum + WordCount + repNum)
lin = lm(data = c, trialScore ~ trialNum + wordCount + repNum)
summary(lin)
lin = lm(data = c, trialScore ~ trialNum + wordCount + repNum+ charCount)
lme = lme4::lmer(data = c, p ~ 1 + (1|trialNum) + (1|wordCount) + (1|repNum))
lme = lme4::lmer(data = c, p ~ 1  + (1|wordCount) + (1|repNum))
