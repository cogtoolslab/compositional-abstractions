#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
p_list
Reduce(min, p_list)
p = unlist(p_list, use.names=FALSE)
p
log(prod(p))
glimpse(df)
length(unique(df$gameid))
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
# df = df_chat %>%
#   select(gameid, repNum, content) %>%
#   filter(repNum %in% c(0,3)) %>%
#   group_by(gameid, repNum) %>%
#   summarise(content=paste(content, collapse=" "))
#
# data_wide <- spread(df, repNum, content)
# data_wide <- data_wide %>% rename(rep0 = "0", rep3 = "3")
# glimpse(data_wide)
# data_wide$rep3[1]
df = read_csv("JJ_content.csv")
df = df %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" "))
glimpse(df)
setwd("~/Documents/Projects/composition-abstractions/analysis")
# df = df_chat %>%
#   select(gameid, repNum, content) %>%
#   filter(repNum %in% c(0,3)) %>%
#   group_by(gameid, repNum) %>%
#   summarise(content=paste(content, collapse=" "))
#
# data_wide <- spread(df, repNum, content)
# data_wide <- data_wide %>% rename(rep0 = "0", rep3 = "3")
# glimpse(data_wide)
# data_wide$rep3[1]
df = read_csv("JJ_content.csv")
df = df %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" "))
glimpse(df)
df[df$gameid == '0738-513adaa7-2548-44a4-8d01-7e2fb3ecbfd4', ]$content
my.corpus = VCorpus(VectorSource(df[df$gameid == '0738-513adaa7-2548-44a4-8d01-7e2fb3ecbfd4', ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
#chiperm function
chiperm <- function(data, B=999, resid=FALSE, filter=FALSE, thresh=1.96, cramer=FALSE){
options(warn=-1)
rowTotals <- rowSums(data)
colTotals <- colSums(data)
obs.chi.value <- chisq.test(data)$statistic
chistat.perm <- vector(mode = "numeric", length = B)
chi.statistic <- function(x)  chisq.test(x)$statistic
chistat.perm <- sapply(r2dtable(B, rowTotals, colTotals), chi.statistic)
p.lowertail <- (1 + sum (chistat.perm < obs.chi.value)) / (1 + B)
p.uppertail <- (1 + sum (chistat.perm > obs.chi.value)) / (1 + B)
two.sided.p <- 2 * min(p.lowertail, p.uppertail)
p.to.report <- ifelse(two.sided.p < 0.001, "< 0.001",
ifelse(two.sided.p < 0.01, "< 0.01",
ifelse(two.sided.p < 0.05, "< 0.05",
round(two.sided.p, 3))))
return(two.sided.p)
}
# df = df_chat %>%
#   select(gameid, repNum, content) %>%
#   filter(repNum %in% c(0,3)) %>%
#   group_by(gameid, repNum) %>%
#   summarise(content=paste(content, collapse=" "))
#
# data_wide <- spread(df, repNum, content)
# data_wide <- data_wide %>% rename(rep0 = "0", rep3 = "3")
# glimpse(data_wide)
# data_wide$rep3[1]
df = read_csv("JJ_content.csv")
df = df %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" "))
glimpse(df)
df[df$gameid == '0738-513adaa7-2548-44a4-8d01-7e2fb3ecbfd4', ]$content
my.corpus = VCorpus(VectorSource(df[df$gameid == '0738-513adaa7-2548-44a4-8d01-7e2fb3ecbfd4', ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
p_list
Reduce(min, p_list)
p = unlist(p_list, use.names=FALSE)
p
length(p)
log(prod(p))
p_list
length(unique(df$gameid))
paste(1)
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
paste(i)
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
library(tidyverse)
library(lme4)
library(tidyboot)
library(ggthemes)
#install.packages("tm")
require("tm")
library(GmAMisc)
library(tidytext)
#chiperm function
chiperm <- function(data, B=999, resid=FALSE, filter=FALSE, thresh=1.96, cramer=FALSE){
options(warn=-1)
rowTotals <- rowSums(data)
colTotals <- colSums(data)
obs.chi.value <- chisq.test(data)$statistic
chistat.perm <- vector(mode = "numeric", length = B)
chi.statistic <- function(x)  chisq.test(x)$statistic
chistat.perm <- sapply(r2dtable(B, rowTotals, colTotals), chi.statistic)
p.lowertail <- (1 + sum (chistat.perm < obs.chi.value)) / (1 + B)
p.uppertail <- (1 + sum (chistat.perm > obs.chi.value)) / (1 + B)
two.sided.p <- 2 * min(p.lowertail, p.uppertail)
p.to.report <- ifelse(two.sided.p < 0.001, "< 0.001",
ifelse(two.sided.p < 0.01, "< 0.01",
ifelse(two.sided.p < 0.05, "< 0.05",
round(two.sided.p, 3))))
return(two.sided.p)
}
# df = df_chat %>%
#   select(gameid, repNum, content) %>%
#   filter(repNum %in% c(0,3)) %>%
#   group_by(gameid, repNum) %>%
#   summarise(content=paste(content, collapse=" "))
#
# data_wide <- spread(df, repNum, content)
# data_wide <- data_wide %>% rename(rep0 = "0", rep3 = "3")
# glimpse(data_wide)
# data_wide$rep3[1]
df = read_csv("JJ_content.csv")
df = df %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" "))
glimpse(df)
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
paste(i)
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
# df = df_chat %>%
#   select(gameid, repNum, content) %>%
#   filter(repNum %in% c(0,3)) %>%
#   group_by(gameid, repNum) %>%
#   summarise(content=paste(content, collapse=" "))
#
# data_wide <- spread(df, repNum, content)
# data_wide <- data_wide %>% rename(rep0 = "0", rep3 = "3")
# glimpse(data_wide)
# data_wide$rep3[1]
df = read_csv("JJ_content.csv")
df = df %>%
select(gameid, repNum, content) %>%
filter(repNum %in% c(0,3)) %>%
group_by(gameid, repNum) %>%
summarise(content=paste(content, collapse=" "))
glimpse(df)
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
paste(i)
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
game = unique(df$gameid)[i]
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
game = unique(df$gameid)[i]
print(i)
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
print(game)
#TRY functino on all gameids with purr
p_list = list()
for(i in 1:length(unique(df$gameid))){
game = unique(df$gameid)[i]
print(game)
my.corpus = VCorpus(VectorSource(df[df$gameid == game, ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
# dtm %>%
#   ggplot(aes(x = term, y = count, fill = factor(document))) +
#   geom_bar(stat = "identity", position = "stack") +
#   coord_flip()
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
p = chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
p_list <- append(p_list, list(p))
}
my.corpus = VCorpus(VectorSource(df[df$gameid == "4909-705b801e-4ec3-4910-b180-bb7612d80f25", ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
dtm
my.corpus = VCorpus(VectorSource(df[df$gameid == "4909-705b801e-4ec3-4910-b180-bb7612d80f25", ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
dtm
my.corpus = VCorpus(VectorSource(df[df$gameid == "4909-705b801e-4ec3-4910-b180-bb7612d80f25", ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
my.corpus = tm_map(my.corpus, removePunctuation)
# my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
my.tdm
my.corpus = VCorpus(VectorSource(df[df$gameid == "4909-705b801e-4ec3-4910-b180-bb7612d80f25", ]$content))
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, content_transformer(tolower))
#my.corpus = tm_map(my.corpus, removePunctuation)
my.corpus = tm_map(my.corpus, removeWords, stopwords())
my.tdm <- TermDocumentMatrix(my.corpus)
my.dtm <- DocumentTermMatrix(my.corpus, control = list(stopwords = TRUE))
dtm <- tidy(my.dtm)
dtm <- spread(dtm, term, count)
dtm[is.na(dtm)] <- 0
row.names(dtm) <- dtm$document
result <- dtm[-1]
row.names(result) <- dtm$document
chiperm(result, B = 999, resid = FALSE, filter = FALSE,
thresh = 1.96, cramer = FALSE)
dtm <-tidy(my.dtm)
dtm %>%
ggplot(aes(x = term, y = count, fill = factor(document))) +
geom_bar(stat = "identity", position = "stack") +
coord_flip()
library(tidyverse)
library(lme4)
library(tidyboot)
library(ggthemes)
theme_set(theme_classic())
theme_update(# axis labels
axis.title = element_text(size = 28),
# tick labels
axis.text = element_text(size = 24),
# title
title = element_text(size = 24),
legend.position = 'FALSE',
text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))
primary_color = '#21606c'
secondary_color = '#22AAAA'
df= read_csv('ORLR-Justin-Julia-rating.csv')
glimpse(df)
df = df[complete.cases(df), ]
glimpse(df)
df$repNum = df$repNum +1
glimpse(df)
df = df %>% group_by(rater,repNum,trialNum,dyad,refType) %>% summarise(refExp = sum(refExp, na.rm = TRUE))
lin = lm(data = df, refExp ~ repNum*rater*refType)
summary(lin)
interaction = df %>%
group_by(repNum, refType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
glimpse(interaction)
ggplot(interaction, aes(x=repNum, y=mu, colour=refType)) + geom_line(size = 1.5)+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width = 0, size = 1.5)+
geom_point(size = 4) +
theme_few() +
xlab("repetition")+
ylab("referring expressions")+
theme(legend.position = 'FALSE', text = element_text(size=16),
element_line(size=1),
element_rect(size=2, color="#00000"))+
scale_color_manual(values=c("#151515","#7D7D7D"))
ggsave('../results/plots/CA_ORLR20_referring_exps.pdf', width=7, height = 11, units='cm', useDingbats = F)
df_trial_total = interaction %>% group_by(repNum)
