setwd("~/Documents/Projects/composition-abstractions/analysis")
knitr::opts_chunk$set(echo = TRUE)
df.block = read_csv('df_block.csv')
library(arm)
knitr::opts_chunk$set(echo = False)
knitr::opts_chunk$set(echo = FALSE)
df.block = read_csv('df_block.csv')
df.block = read.csv('df_block.csv')
head(df.block)
View(df.block)
df_exit = read.csv('df_exit.csv')
df_block = read.csv('df_block.csv')
df_chat = read.csv('df_chat.csv')
df_trial = read.csv('df_trial.csv')
df_exit = read.csv('df_exit.csv')
View(df.block)
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
groupby('gameid','trialNum') %>%
filter('trialScore' >75)
library(tidyverse)
library(lme4)
library(arm)
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
groupby('gameid','trialNum') %>%
filter('trialScore' >75)
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
groupby('gameid','trialNum') %>%
filter('trialScore' >75)
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by('gameid','trialNum') %>%
filter('trialScore' >75)
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by('gameid','trialNum') %>%
filter('trialScore' > 75, na.rm = TRUE)
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by('gameid','trialNum') %>%
filter('trialScore' > 75 & !is.na('trialScore'))
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice')
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice'))
group_by(gameid) %>% n()
group_by(gameid) %>% n()
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(gameid) %>% n()
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(gameid) %>% n()
#How many dyads fulfill 75% Accuracy on 75% of trials
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(gameid)
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(gameid) )
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(gameid) %>% sum())
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>% tally)
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>% filter(tally>=9))
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>% filter(tally()>=9))
#How many dyads fulfill 75% Accuracy on 75% of trials
View(df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>% filter(n >=9))
#How many dyads
View(df_exit)
df_block = read.csv('df_block.csv')
df_chat = read.csv('df_chat.csv')
df_trial = read.csv('df_trial.csv')
df_exit = read.csv('df_exit.csv')
View(df.block)
#How many dyads fulfill 75% Accuracy on 75% of trials
df75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n >=9)
#How many dyads
View(df_exit)
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n >=9)
#How many dyads fulfill 75% Accuracy on 75% of trials
df75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
#How many dyads fulfill 75% Accuracy on 75% of trials
df75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 & !is.na(trialScore) & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
#How many dyads fulfill 75% Accuracy on 75% of trials
df75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
#How many dyads said they were confused
df_exit %>%
filter(confused == 'yes') %>% select (unique(gameId))
#How many dyads said they were confused
df_exit %>%
filter(confused == 'yes') %>% select (unique(gameid))
#How many dyads said they were confused
df_exit %>%
filter(confused == 'yes') %>%
select (gameid)
#How many dyads said they were confused
df_exit %>%
filter(confused == 'yes') %>%
group_by(gameid)
#How many dyads said they were confused
df_exit %>%
filter(confused == 'yes') %>%
group_by(unique(gameid))
#How many dyads said they were confused
df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
#How many dyads fulfill 75% Accuracy on 75% of trials
#currently including "score>75" to account for livetest0 which had diff    name
df75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads fulfill 75% Accuracy on 75% of trials
#currently including "score>75" to account for livetest0 which had diff    name
df75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
#How many dyads fulfill 75% Accuracy on 75% of trials
#currently including "score>75" to account for livetest0 which had diff    name
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(unique(gameid))%>%
tally %>%
filter(n/12 >=0.75)
#How many dyads fulfill 75% Accuracy on 75% of trials
#currently including "score>75" to account for livetest0 which had diff    name
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75)
#How many dyads fulfill 75% Accuracy on 75% of trials
#currently including "score>75" to account for livetest0 which had diff    name
df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
gamesToKeep
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
#How many dyads fulfill 75% Accuracy on 75% of trials
#currently including "score>75" to account for livetest0 which had diff    name
games75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75 | score >75 & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
#Word count per repNum and trialNum
df_chat$WordCount = sapply(strsplit(df_chat$content, " "), length)
View(df_chat)
strsplit(tolower(df_chat$content), " ")
sapply(strsplit(tolower(df_chat$content), " "), length)
#Word count per repNum and trialNum
df_chat$WordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
View(df_chat)
#Word count per repNum and trialNum
df_chat$wordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
df_chat %>%
group_by(repNum) %>%
sum(wordCount)
#Word count per repNum and trialNum
df_chat$wordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
df_chat %>%
group_by(repNum) %>%
sum(wordCount)
df_chat %>%
group_by(gameid,repNum)
df_chat$charCount = sapply(df_char, nchar())
df_chat$charCount = sapply(df_char, nchar
df_chat$charCount = sapply(df_char, nchar)
df_chat$charCount = sapply(df_chat, nchar)
df_chat$charCount = sapply(df_chat, nchar())
df_chat$charCount = sapply(nchar(df_chat))
df_chat$charCount = sapply(df_chat$content, nchar)
df_chat$charCount = sapply(tolower(df_chat$content), nchar())
df_chat$charCount =  nchar(tolower(df_chat$content))
View(df_chat)
df_chat %>%
select(gameid,repNum,wordCount)
group_by(gameid,repNum) %>% sum(wordCount)
df_chat %>%
select(gameid,repNum,wordCount)
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(sum(wordCount))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCount)) %>% geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCount)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCount)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount))%>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
a = df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount))
ggplot(data = aaes(x = repNum, y = wordCountAvg)) + geom_line()
ggplot(data = a, aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCount)) + geom_line()
dtype(df_chat$repNum)
type(df_chat$repNum)
class(df_chat$repNum)
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCount)) + geom_line()
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCount)) + geom_line()
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCountAvg = mean(wordCount)) %>%
ggplot(aes(x = repNum, y = wordCountAvg)) + geom_line()
df_chat %>%
select(gameid,repNum,charCount) %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount)) %>%
ggplot(aes(x = repNum, y = charCountAvg)) + geom_line()
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount))
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount))
View(df_trial)
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialscore), score, trialScore))
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialScore), score, trialScore))
View(df_trial)
View(df_trial)
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount))
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,repNum,wordCount) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount))
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,repNum,wordCount)
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum) %>%
summarise(wordCount = sum(wordCount))
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum) %>%
summarise(wordCount = sum(wordCount))
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
df_trial %>% select(gameid,trialNum, repNum,trialScore)
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_trial <- transform(df_trial, trialScore = ifelse(is.na(trialScore), score, trialScore)) #fix score variable name change from livetest0 to pilots
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
df_trial$repNum = as.numeric(as.character(df_trial$repNum))
df_trial %>% select(gameid,trialNum, repNum,trialScore)
#join chat and score to get correlation of words and score
df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
df_trial %>% select(gameid,trialNum, repNum,trialScore) %>%
filter(gameid == '0662-7a9212c9-5aa7-44de-9ed7-4663c56562d2')
df_trial %>% select(gameid,trialNum, repNum,trialScore)
View(df_trial %>% select(gameid,trialNum, repNum,trialScore) )
df_trial %>% select(gameid,trialNum, repNum,trialScore) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(trialScore = max(trialScore)) #to deal with multiple practices
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
#join chat and score to get correlation of words and score
a =df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
b = df_trial %>% select(gameid,trialNum, repNum,trialScore) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(trialScore = max(trialScore)) #to deal with multiple practices
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
View(c)
ggplot(data = c, aes(x = trialNum, y = trialScore, color = repNum))+ geom_point()
class(c$trialNum)
df_trial$trialNum = as.numeric(as.character(df_trial$trialNum))
df_trial$repNum = as.numeric(as.character(df_trial$repNum))
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
#join chat and score to get correlation of words and score
a =df_chat %>%
select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
b = df_trial %>% select(gameid,trialNum, repNum,trialScore) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(trialScore = max(trialScore)) #to deal with multiple practices
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
ggplot(data = c, aes(x = trialNum, y = trialScore, color = repNum))+ geom_point()
class(c$trialNum)
ggplot(data = c, aes(x = trialNum, y = trialScore, color = repNum))+ geom_point()
ggplot(data = c, aes(x = trialNum, y = trialScore, color = repNum))+ geom_point()+geom_smooth()
c %>% filter(gameid %in% gamesToKeep) %>%
ggplot(aes(x = trialNum, y = trialScore, color = repNum))+
geom_point()+
geom_smooth()
View(c)
c %>% filter(gameid %in% gamesToKeep)
gamesToKeep
View(df_trial %>% filter(gameid %in% c('0662-7a9212c9-5aa7-44de-9ed7-4663c56562d2')))
View(df_trial %>% filter(gameid %in% gamesToKeep))
View(df_trial %>% filter(as.character(gameid) %in% as.character(gamesToKeep)))
d = merge(c,gamesToKeep, by = "gameid", all.y = TRUE)
View(d)
d %>% filter(gameid %in% gamesToKeep) %>%
ggplot(aes(x = trialNum, y = trialScore, color = repNum))+
geom_point()+
geom_smooth()
d  %>%
ggplot(aes(x = trialNum, y = trialScore, color = repNum))+
geom_point()+
geom_smooth()
#d = merge(c,gamesToKeep, by = "gameid", all.y = TRUE)
c  %>%
ggplot(aes(x = trialNum, y = trialScore, color = repNum))+
geom_point()+
geom_smooth()
