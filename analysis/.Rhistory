filter(trialScore > 75  & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
df_chat$wordCount = sapply(strsplit(tolower(df_chat$content), " "), length)
df_chat$charCount =  nchar(tolower(df_chat$content))
df_chat$repNum = as.numeric(as.character(df_chat$repNum))
df_chat$trialNum = as.numeric(as.character(df_chat$trialNum))
chat_grouped = df_chat %>%
dplyr::select(gameid,repNum, wordCount) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
group_by(repNum) %>% summarise(wordCount = mean(wordCount)) %>%
drop_na()
chat_dyad = df_chat %>%
dplyr::select(gameid,repNum, wordCount) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(gameid,repNum) %>%
summarise(wordCount = sum(wordCount)) %>%
drop_na() #remove practice trials
ggplot(chat_dyad,  aes(x = repNum, y = wordCount))+
geom_line(aes(group = gameid), alpha = 0.3)+
geom_line(data =chat_grouped, aes(x = repNum, y = wordCount), size = 2, color = 'red')+
#theme_bw()+
xlab('Repetition Number')+
ylab('Number of Words per Trial')
ggsave("WordCount.pdf",width = 5, height = 7)
df_chat %>%
dplyr::select(gameid,repNum,charCount) %>%
group_by(gameid,repNum) %>%
summarise(charCount = sum(charCount)) %>%
group_by(repNum) %>% summarise(charCountAvg = mean(charCount)) %>%
ggplot(aes(x = repNum, y = charCountAvg)) + geom_line()
#Average score per rep
score_grouped = df_trial %>%
dplyr::select(gameid,repNum, trialScore) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(repNum) %>% summarise(Score = mean(trialScore)) %>%
drop_na()
score_dyad = df_trial %>%
dplyr::select(gameid,repNum, trialScore) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(gameid,repNum) %>%
summarise(Score = mean(trialScore)) %>%
drop_na() #remove practice trials
ggplot(score_dyad,  aes(x = repNum, y = Score))+
geom_line(aes(group = gameid), alpha = 0.3)+
geom_line(data =score_grouped, aes(x = repNum, y = Score), size = 2, color = 'red')+
#theme_bw()+
xlab('Repetition Number')+
ylab('Reconstruction Accuracy')
ggsave("score.pdf",width = 5, height = 7)
#Blocks placed per rep
block_grouped = df_block %>%
dplyr::select(gameid,repNum, trialNum, turnNum) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(gameid, repNum, trialNum, turnNum) %>% summarise(n = n()) %>%
group_by(gameid, repNum) %>% summarise(blocksPlaced = mean(n)) %>%
group_by(repNum) %>% summarise(blocksPlaced = mean(blocksPlaced)) %>%
drop_na()
block_dyad = df_block %>%
dplyr::select(gameid,repNum, trialNum, turnNum) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(gameid, repNum, trialNum, turnNum) %>% summarise(n = n()) %>%
group_by(gameid, repNum) %>% summarise(blocksPlaced = mean(n)) %>%
drop_na()
ggplot(block_dyad,  aes(x = repNum, y = blocksPlaced))+
geom_line(aes(group = gameid), alpha = 0.3)+
geom_line(data =block_grouped, aes(x = repNum, y = blocksPlaced), size = 2, color = 'red')+
#theme_bw()+
xlab('Repetition Number')+
ylab('Number of Blocks per Instruction')
#theme(axis.text.x = element_blank())
ggsave("blocksplaced.pdf",width = 5, height = 7)
a = df_chat %>%
dplyr::select(gameid,trialNum,repNum,wordCount) %>%
group_by(gameid,trialNum, repNum) %>%
summarise(wordCount = sum(wordCount))
b = df_trial %>% dplyr::select(gameid, trialNum, repNum, trialScore, towerSet) %>%
group_by(gameid, trialNum, repNum, towerSet) %>%
summarise(trialScore = max(trialScore)) #to deal with multiple practices
c = merge(a, b, by = c("gameid", "trialNum", "repNum"))
d = merge(c,gamesToKeep, by = "gameid", all.y = TRUE)
d  %>%
ggplot(aes(x = repNum, y = wordCount, color = repNum))+
geom_point()+
geom_smooth()
lme = lmer(data = c, wordCount ~ repNum + (1 | gameid) + (1 | towerSet))
summary(lme)
block_dyad = df_block %>%
dplyr::select(gameid,repNum, trialNum, turnNum, towerSet) %>%
subset(gameid %in% gamesToKeep$gameid) %>%
group_by(gameid, repNum, trialNum, turnNum, towerSet) %>% summarise(n = n()) %>%
group_by(gameid, repNum, towerSet) %>% summarise(blocksPlaced = mean(n)) %>%
drop_na()
lme = lmer(data = block_dyad, blocksPlaced ~ repNum + (1 | gameid) + (1| towerSet))
summary(lme)
dat_trial = df_trial %>% subset(gameid %in% gamesToKeep$gameid)
lme = lmer(data = dat_trial, trialScore ~ repNum + (1 | gameid) + (1| towerSet))
summary(lme)
View(df_trial)
View(df_trail %>% filter(trailNum = NA))
View(df_trial %>% filter(trailNum = NA))
View(df_trial %>% filter(is.na(trialNum)))
View(df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid))
View(df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% n())
table(practice$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid)
table(practice$gameid)
#How many dyads fulfill 75% Accuracy on 75% of trials
games75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75  & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
practice2 = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid %in% gamesToKeep$gameid)
table(practice2$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid)
table(practice$gameid)
table(practice2$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid)
table(practice$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid %not in% gamesToKeep$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(!gameid %in% gamesToKeep$gameid)
table(practice$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(!gameid %in% gamesToKeep$gameid)
table(practice$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(!(gameid %in% gamesToKeep$gameid))
table(practice$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid %not in% gamesToKeep$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid %notin% gamesToKeep$gameid)
practice = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid !%in% gamesToKeep$gameid)
practice2 = df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid %in% gamesToKeep$gameid)
table(practice2$gameid)
df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% tally()
len(gamesToKeep)
length(gamesToKeep)
#How many dyads fulfill 75% Accuracy on 75% of trials
games75 = df_trial %>%
group_by(gameid, trialNum) %>%
filter(trialScore > 75  & repNum != 'practice') %>%
group_by(gameid)%>%
tally %>%
filter(n/12 >=0.75) %>%
distinct(gameid)
#How many dyads said they were confused <-- this is probably inverse coded...
gamesConfused = df_exit %>%
filter(confused == 'yes') %>%
distinct(gameid)
#How many dyads said they spoke English
gamesEnglish = df_exit %>%
filter(nativeEnglish == 'yes') %>%
distinct(gameid)
gamesToKeep = intersect(games75, gamesConfused, gamesEnglish)
gamesToKeep
gamesToKeep
df_trial %>% select(gameid, trialNum) %>% filter(is.na(trialNum)) %>%
group_by(gameid) %>% subset(gameid %notin% gamesToKeep$gameid) %>%
tally()
df_trial %>% mutate(keepGame = gameid %in% gamesToKeep$gameid) %>% filter(is.na(trialNum)) %>% group_by(gameid, keepGame) %>% tally()
View(df_trial %>% mutate(keepGame = gameid %in% gamesToKeep$gameid) %>% filter(is.na(trialNum)) %>% group_by(gameid, keepGame) %>% tally())
ndays <- 876
theta <- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 2.0
B <- 1.01
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
ndays <- 876
theta <- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 0
A <- 0
B <- 0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
theta <- 3.0
theta <- 3.0
ndays <- 876
theta <- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.01
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
<- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
<- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
library(ggplot2)
ggplot(x = t, y = p)+
geom_line()
plot(p, type="l")
abline(h=exp(mu), lty=2, colors(red))
abline(h=exp(mu), lty=2, color = red)
abline(h=exp(mu), lty=2, col = 'red')
plot(p, type="l", xlab = 'Day')
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
mark(labels = "Some messy plot", x = 700, y = 0.00007)
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
library('unikn')
import.packages('unikn')
install.packages('unikn')
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
library('unikn')
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
mark(labels = "Some messy plot", x = 700, y = 0.00007)
mark(labels = "Some messy plot", x = 700, y = 0.00007, cex = 1)
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
mark(labels = "Some messy plot", x = 700, y = 0.00007, cex = 1)
mark(labels = "Z = 0 \n B=0", x = 700, y = 0.00007, cex = 1)
mark(labels = "A = 0 \n B=0", x = 700, y = 0.00007, cex = 1, col_bg = 'white')
help(mark)
setwd("~/Documents/Projects/composition-abstractions/analysis")
library(tidyverse)
library(lme4)
df = read_csv('justin_julia_tag.csv')
glimpse(df)
#df$block_diff = df$block_justin - df$block_julia
#mean(df$block_diff)
#hist(df$block_diff)
df = df %>%  filter(repNum == 3 | repNum == 0)
lin = lm(data = df, refExp ~ repNum*rater*expType)
summary(lin)
interaction = df %>%
group_by(repNum, expType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
View(interaction)
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_line()+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width=.1)
source('~/Documents/Projects/composition-abstractions/analysis/ORLR_human_tag_analysis.R')
df= read_csv('justin_julia_tag.csv')
lin = lm(data = df, refExp ~ repNum*rater*expType)
summary(lin)
interaction = df %>%
group_by(repNum, expType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_line()+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width=.1)
apply(df, 2, function(x) any(is.na(x)))
sum(is.na(df$refExp))
df= read_csv('justin_julia_tag.csv')
glimpse(df)
sum(is.na(df$refExp))
View(df)
df[complete.cases(df), ]
df= read_csv('justin_julia_tag.csv')
glimpse(df)
glimpse(df)
#df$block_diff = df$block_justin - df$block_julia
#mean(df$block_diff)
#hist(df$block_diff)
df = df %>%  filter(repNum == 3 | repNum == 0)
lin = lm(data = df, refExp ~ repNum*rater*expType)
summary(lin)
sum(is.na(df$refExp))
interaction = df %>%
group_by(repNum, expType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
View(interaction)
df= read_csv('justin_julia_tag.csv')
glimpse(df)
df = df[complete.cases(df), ]
glimpse(df)
lin = lm(data = df, refExp ~ repNum*rater*expType)
summary(lin)
interaction = df %>%
group_by(repNum, expType) %>%
summarise(mu = mean(refExp), sd = sd(refExp), n = n(), sem = sd(refExp)/sqrt(n()))
View(interaction)
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_line()+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width=.1)
glimpse(interaction)
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_line()+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width=.1)
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_point()+
geom_smooth(method = 'lm')
ggplot(df, aes(x=repNum, y=refExp, colour=expType)) + geom_point()+
geom_smooth(method = 'lm')
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_point()+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width=.1)
ggplot(interaction, aes(x=repNum, y=mu, colour=expType)) + geom_line()+
geom_errorbar(aes(ymin=mu-sem, ymax=mu+sem), width=.1)
source('~/Documents/Projects/composition-abstractions/analysis/ORLR_human_tag_analysis.R')
